Type → int

Vdecl → Type ident {, ident};

Cdecl → const Type ident = number {, ident = number};

Function → void ident ( Arguments ) CompoundStatment

Arguments → ε

Stat → Assign | Condition | Wlop | CompoundStatment | Vdecl | Cdecl | ;

CompoundStatment → '{' {Stat} '}'

wlop → while (Relation)  Stat 

Condition → if (relation) Stat [else Stat]

Assign → ident = Expr ;

Relation → Expr Relation Expr

Relopr → >|<|==|!=|>=|<=

Expr → [Expr Lopr]Term

Term → [Term Hopr]Factor

factor → numer|(Expr) 

Lopr → +|-

Hopr → *|/

