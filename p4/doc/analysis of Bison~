			FLEX&BISON分析
构造C0编译器由三步组成：
1.由flex的输入规则写出c0.lex，flex根据C0.lex自动生成词法分析程序c0.lex.c
2.按照bison的输入规则写出C0.y,bison根据c0.y自动生成语法分析程序c0.tab.c
3.c0.lex.c,c0.tab.c通过gcc生成c0语言的编译器





BISON
一、bison输入文法的规范格式
bison的输入文法主要有四部分组成
1)第一部分是头文件声明，这部分内容将原封不动的复制到所生成的.c文件中，基本格式举例：
%{
	#include <stdio.h>
%}
2)第二部分主要是符号和性质的定义，基本格式如下，例:
%token number
由flex输出的字符记号都要在这一部分声明，它们会作为bison输入中的终结符，此外还可声明一些其他东西，如union或运算符的结合性等。
3)这部分是语法规则的定义，也是最核心的部分，主要包括各个产生式和相应的语义动作。bison会根据这些规则生成相应的.c代码。
exp	: NUMBER                 { $$ = $1;        }
        | exp PLUS  exp          { $$ = $1 + $3;   }
	;
':'是开始符，后面跟着产生式.';'是结束符，{}内是语义动作。{}插入的位置表示语义动作的执行时间。
4)最后一部分是函数和函数定义。

二、不同输入文法对生成的分析器源代码的影响
以expr.tab.c和expr1.tab.c为例，在expr1.y的表达式中，多定义了一个term和factor,以区别各算符的优先级，其他地方和expr.y都一样。在他们分别生成的代码expr.tab.c和expr1.tab.c中，大部分的代码是一模一样的，但在分析expr时，两者生成的分析表会不一样。


FLEX

flex输入规范，类似于bison的输入结构，主要分为四部分，如下：
%{
	头文件
%}
定义段(definitions)
%%
规则段(rules)
%%
用户代码段(user code)






